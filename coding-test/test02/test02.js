// 문제 설명
// 정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// numbers의 길이는 2 이상 100 이하입니다.
// numbers의 모든 수는 0 이상 100 이하입니다.

// 입출력 예
// ---------------------------------
// numbers	    |   result
// ---------------------------------
// [2,1,3,4,1]	|   [2,3,4,5,6,7]
// ---------------------------------
// [5,0,2,7]	|   [2,5,7,9,12]
// ---------------------------------


// 입출력 예 설명

// 입출력 예 #1

// 2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
// 3 = 2 + 1 입니다.
// 4 = 1 + 3 입니다.
// 5 = 1 + 4 = 2 + 3 입니다.
// 6 = 2 + 4 입니다.
// 7 = 3 + 4 입니다.
// 따라서 [2,3,4,5,6,7] 을 return 해야 합니다.

// 입출력 예 #2

// 2 = 0 + 2 입니다.
// 5 = 5 + 0 입니다.
// 7 = 0 + 7 = 5 + 2 입니다.
// 9 = 2 + 7 입니다.
// 12 = 5 + 7 입니다.
// 따라서 [2,5,7,9,12] 를 return 해야 합니다.

function solution(numbers) {
    //numbers = [2, 1, 3, 4, 1];
    var answer = [];
    for (let i = 0; i < numbers.length; i++) {
        for (let j = 0; j < numbers.length; j++) {
            if ( i != j){
                let pValue = numbers[i] + numbers[j];
                if (!answer.includes(pValue)){
                    answer.push(pValue);
                    // console.log(answer);
                }
            }
        }
    }

    answer.sort((a, b) => a - b); //오름차순 정렬
    
    return answer;
}

let pNumbers = [2, 1, 3, 4, 1];
console.log(solution(pNumbers));

//회고 : 처음엔 배열 내 동일한 인덱스 두개를 합쳐도 되는 줄 알고 진행했다가 
// 정답과 다른 것을 보고 문제를 다시 보니 서로 다른 인덱스의 두 수를 뽑아야 하는 것을 확인하고
// 이중 for문 안에 if ( i != j) 조건을 넣었다.
// 가급적 이중 for문을 사용하고 싶진 않지만.. 문제를 보는 순간 이것부터 떠올랐다. (나쁜 습관인가..)
// 나중에 시간적 여유가 생기면 다른 방식으로도 풀어보겠다.
